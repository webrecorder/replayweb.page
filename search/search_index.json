{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"docs/","title":"Home","text":"<p>Welcome to the ReplayWeb.page documentation! These docs contain the following sections:</p> <ul> <li>User Guide \u2014 Introduction and reference for using ReplayWeb.page to view archived web content.</li> <li>Embedding Docs \u2014 Information on integrating and embedding ReplayWeb.page as a web archive viewer into existing web sites.</li> </ul>"},{"location":"docs/#what-is-replaywebpage","title":"What is ReplayWeb.page?","text":"<p>ReplayWeb.page is an open-source, browser-based viewer that loads and renders static web archive files. It functions as a serverless (client side) replay tool that doesn't require a server to coordinate what archived content should be retrieved from a large central repository. It allows web archives to be hosted on any regular web server and viewed in any modern browser.</p>"},{"location":"docs/#key-features","title":"Key Features","text":"<ul> <li>High-fidelity replay of archived items in several formats.</li> <li>Page search and URL search.</li> <li>Full text search support for archived items that include extracted text.</li> <li>On-demand, incremental loading of large files.</li> <li>Several options for fully-functional offline usage, including a standalone desktop app with Flash support.</li> <li>Support for embedding archived items directly into your website!</li> </ul>"},{"location":"docs/#archives-repositories-and-other-projects-using-replaywebpage","title":"Archives, Repositories, and Other Projects Using ReplayWeb.page","text":"<p>ReplayWeb.page allows web archives seamlessly integrate into existing web sites, be it repositories, collections, or other archiving services.</p> <p>Below are a few of the integrations we know of that use ReplayWeb.page:</p> <ul> <li>Perma.cc \u2014 Web archiving service offered by Harvard's Library Innovation Lab.</li> <li>GhostArchive \u2014 Free Web Archiving Service</li> <li>The Feminist Institute \u2014 Websites archived to document and celebrate feminist contributions to culture.</li> <li>CineFiles \u2014 Film-related web archive ephemera collected by the UC Berkeley Art Museum and Pacific Film Archive.</li> <li>Stanford Digital Publication Web Archives \u2014 Archives of Stanford University Press Digital Publications.</li> <li>ysdn.info \u2014 Final year grad show websites from the now defunct York / Sheridan design program.</li> <li>Archipelago Commons \u2014 Digital Object Repository developed by the Metropolitan New York Library Council.</li> </ul> <p>If you know of any additional sites that you'd like us to include here, let us know by writing to info [at] webrecorder.net</p>"},{"location":"docs/embedding/","title":"Embedding ReplayWeb.page","text":""},{"location":"docs/embedding/#introduction","title":"Introduction","text":"<p>A key goal of ReplayWeb.page is to make embedding archived web content into other sites as easy as embedding other media like images and PDFs.</p> <p>To make this possible ReplayWeb.page provides the <code>&lt;replay-web-page&gt;</code> HTML web component to support embedding in the pages where you would like to display web archives. This component works in all modern browsers, and has several configuration options that allow for control over the initial URL or snapshot to display from the archive when the component loads. The component can load WACZ files, WARC files and other formats.</p> <p>The <code>&lt;replay-web-page&gt;</code> web component consists of a \"backend\" service worker, which emulates a web server, and a \"frontend\" UI, though in reality both are scripts running in the browser - there is no web server!</p> <p>Tip: Serving web archives efficiently with WACZ files</p> <p>While other web archive filetypes may require ReplayWeb.page to download them in their entirety before viewing, WACZ files allow the service worker to pull individual resources from the file as they are requested by the user. Full retrieval of the WACZ by ReplayWeb.page is not required as long as the server delivering the WACZ file supports HTTP range requests. This means that serving archived content from WACZ files is effectively as bandwidth efficient as any other web content!</p>"},{"location":"docs/embedding/#example","title":"Example","text":""},{"location":"docs/embedding/#loading-the-replaywebpage-ui-frontend","title":"Loading the ReplayWeb.page UI (Frontend)","text":"<p>To embed a WACZ stored at <code>https://replayweb.page/docs/examples/tweet-example.wacz</code>, add the following <code>&lt;script&gt;</code> tag to your HTML page to load the user interface from the jsDelivr CDN, and use the <code>&lt;replay-web-page&gt;</code> component to point to the WACZ:</p> <pre><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/replaywebpage@2.3.22/ui.js\"&gt;&lt;/script&gt;\n\n&lt;replay-web-page source=\"https://replayweb.page/docs/examples/tweet-example.wacz\"\nurl=\"https://oembed.link/https://twitter.com/webrecorder_io/status/1565881026215219200\"&gt;&lt;/replay-web-page&gt;\n</code></pre> <p>In this example, the <code>source</code> attribute is pointing to the location of the WACZ file (in this case published on AWS S3) and the <code>url</code> attribute is used to indicate what URL to display from the archived item after the component loads.</p>"},{"location":"docs/embedding/#loading-the-service-worker-backend","title":"Loading the Service Worker (Backend)","text":"<p>ReplayWeb.page's backend is a service worker which intercepts requests for URLs and looks for them in your loaded archived item. Service workers are just JavaScript files and can be loaded from the CDN (Content Delivery Network), it is necessary to add a service worker path from where the web archive will be served to a local path. We use <code>/replay</code> in these examples, but it can be anything. Since the service worker takes over the rendering of this path, it should be a path that is otherwise non-existent (serves a 404) from the actual web server.</p> <p>To do this, create a <code>/replay</code> subdirectory and in it, a new JavaScript file (<code>/replay/sw.js</code>) and copy the following to the file:</p> <pre><code>importScripts(\"https://cdn.jsdelivr.net/npm/replaywebpage@2.3.22/sw.js\");\n</code></pre> <p>If the HTML above was added to <code>https://example.com/path/my-web-archive-embed.html</code> then the <code>sw.js</code> should be added such that it is at: <code>https://example.com/path/replay/sw.js</code>.</p> <p>This has the affect imports the actual server worker from the CDN, serving it on your site <code>https://example.com/replay/sw.js</code> and allowing it to render web archives on the <code>/replay/</code> path.</p> <p>That's it! Loading <code>https://example.com/path/my-web-archive-embed.html</code> should now load the web archive.</p> <p>Be sure to add width and height styles to the <code>&lt;replay-web-page&gt;</code> tag as needed to scale the embed, and replace <code>https://replayweb.page/docs/examples/example.wacz</code> with any web archive hosted on your site.</p> Info: Loading files from different servers <p>If the file is loaded from a different origin, your site must have Cross Origin Resource Sharing (CORS) access to download the web archive. See Loading Errors below for more info.</p> Best Practice: Controlling ReplayWeb.page versions <p>The above example uses the version number \"2.3.22\" in paths to load a specific version of ReplayWeb.page from a CDN. These URLs point to a specific version of ReplayWeb.page software released on NPM, meaning that your replay viewer should stay stable, even if ReplayWeb.page is updated.</p> <ul> <li><code>https://cdn.jsdelivr.net/npm/replaywebpage@2.3.22/ui.js</code></li> <li><code>https://cdn.jsdelivr.net/npm/replaywebpage@2.3.22/sw.js</code></li> </ul> <p>Although ReplayWeb.page strives to remain backwards compatible, this addresses any potential issue of older embeds breaking when the replay system is updated.</p> <p>You can also use the latest stable release by omitting the version, and the URL will automatically load the latest published release:</p> <ul> <li><code>https://cdn.jsdelivr.net/npm/replaywebpage/ui.js</code></li> <li><code>https://cdn.jsdelivr.net/npm/replaywebpage/sw.js</code></li> </ul> <p>This is not recommended for production use as this is more likely to break in case there is a breaking change.</p> <p>For testing the very latest, it is possible to simply link to replayweb.page itself, eg. <code>https://replayweb.page/ui.js</code> and <code>https://replayweb.page/sw.js</code> but these are updated the most frequently and more likely to break.</p> <p>For production use, it is recommended to use a fixed version and explicitly upgrade as necessary.</p>"},{"location":"docs/embedding/#self-hosting","title":"Self Hosting","text":"<p>Sometimes it can be desirable to self-host the user interface, service worker, and WACZ files. This is useful for preventing tracking by CDNs, or to make it easier to host the content in one place without needing to work out the details of Cross Origin Resource Sharing (CORS). </p> <p>Following the same steps above, instead of loading the JavaScript and WACZ file from external locations, download the <code>ui.js</code> and <code>sw.js</code> JavaScript files and put them on the same server as the HTML that you are publishing. Link them accordingly replacing the CDN links in the guide above.</p>"},{"location":"docs/embedding/#example_1","title":"Example","text":"<p>If you are publishing a page at <code>https://example.com/path/my-web-archive-embed.html</code>, adjust the <code>&lt;script&gt;</code> element to load the ui from a location on your website:</p> <pre><code>&lt;script src=\"ui.js\"&gt;&lt;/script&gt;\n\n&lt;replay-web-page source=\"example.wacz\" url=\"https://webrecorder.net\"&gt;&lt;/replay-web-page&gt;\n</code></pre> <p>The following URLs would then need to resolve correctly:</p> <ul> <li>https://example.com/path/my-web-archive-embed.html</li> <li>https://example.com/path/example.wacz</li> <li>https://example.com/path/ui.js</li> <li>https://example.com/path/replay/sw.js</li> </ul> <p>When embedding more than one web archive on your site it can be helpful to centralize the location of the frontend and backend JavaScript, and potentially WACZ files. The <code>&lt;replay-web-page&gt;</code> component has a <code>replayBase</code> attribute that lets you define the location to load the <code>sw.js</code> service worker from. By default, <code>replayBase</code> is set to <code>./replay/</code> and so the service worker is loaded from <code>./replay/sw.js</code>.</p> <p>For example, if you publish your JavaScript files at:</p> <ul> <li>https://example.com/js/ui.js</li> <li>https://example.com/js/sw.js</li> <li>https://example.com/wacz/example.wacz</li> </ul> <p>Then you must adjust your HTML to reference the new resources:</p> <pre><code>&lt;script src=\"/js/ui.js\"&gt;&lt;/script&gt;\n\n&lt;replay-web-page replayBase=\"/js/\" source=\"/wacz/example.wacz\" url=\"https://webrecorder.net\"&gt;&lt;/replay-web-page&gt;\n</code></pre>"},{"location":"docs/embedding/#embed-modes","title":"Embed Modes","text":"<p>ReplayWeb.page offers four different ways to embed the archived content, including with or without the navigation UI, and with an archival information dropdown. The embed mode can be set via the <code>embed</code> property:</p> <ul> <li> <p><code>default</code> or not set: Show the replay page and the location bar, allowing navigation to other pages and accessing the page list.</p> </li> <li> <p><code>full</code>: Show the full replayweb.page UI and logo.</p> </li> <li> <p><code>replayonly</code>: Show just the replayed page, and no additional UI or nav bar buttons. Useful for embedding a single page.</p> </li> <li> <p><code>replay-with-info</code>: Show the <code>replayonly</code> mode, but also add an archive info dropdown, which shows an archival 'receipt' with provenance and verification information (new in 1.7.0)</p> </li> </ul> Example: Embed with <code>replay-with-info</code> enabled <p> </p>"},{"location":"docs/embedding/#embedding-options","title":"Embedding Options","text":"<p>The <code>&lt;replay-web-page&gt;</code> tag is a web component that supports a number of additional attributes:</p> Attribute Description <code>source</code> Source URL for the archived item. This should be one of the supported formats loaded from one of the support locations and is required. <code>url</code> The starting URL to load from the archive. If omitted, will start with the page list or URL search view. <code>ts</code> The ISO 8601 timestamp of the starting URL to load. If omitted, the latest available version is used. <code>deepLink</code> If set, ReplayWeb.page will modify the URL of the page to allow for 'deep linking' to exact pages in the embed. <code>updateFavicons</code> If set, ReplayWeb.page will set the favicon of the page to the current webpage being viewed. Only supported in Chrome. <code>embed</code> (<code>default</code> / <code>full</code> / <code>replayonly</code> / <code>replay-with-info</code> ) - See Embed Modes above. <code>swName</code> Service Worker filename (default: <code>sw.js</code>). Set if using different name, don't include path, only filename <code>replayBase</code> Location of the service worker file (eg. sw.js), defaults to <code>./replay/</code> as mentioned above, but can be overridden. <code>coll</code> Internal ID for this collection, usually generated automatically. <code>config</code> Extra per collection config options (such as custom fuzzy matching rules, TODO add more info!) <code>sandbox</code> If set, will iframe in <code>sandbox</code>. Provides extra isolation, but prevents PDFs from loading in an embed, and may result in links opening in new windows. <code>noWebWorker</code> If set, will not use Web Worker for loading, only Service Worker. May be useful for certain loading edge cases. <code>noCache</code> If set, will not cache any loaded content HTTP responses locally, always loading from original source. <code>hideOffscreen</code> If set, will unload the embed when it is not visible and reload when scrolled into view. Useful if multiple embeds per-page to avoid loading all at once. <code>newWindowBase</code> set base replay URL loaded when a page opens a new window, defaults to <code>https://replayweb.page/</code> if <code>deepLink</code> not enabled, otherwise, to current page with new link. <code>requireSubdomainIframe</code> If set, will only load embed in an iframe loaded from a subdomain, for increased origin isolation. <code>loading=\"eager\"</code> If set, will load the entire WACZ file at once (regardless of size), and not attempt on-demand range request loading. <code>useRuffle</code> If set, will enable include Ruffle Flash emulator. Must include the <code>ruffle/</code> directory in <code>replayBase</code>. <code>useAdblock</code> If set, will enable adblocking, by injecting CSS stylesheets to hide ads based on a list of ad filter rules.  By default, the EasyList filter rules are used. <code>adblockRulesUrl</code> Provide a URL to a custom Adblock Plus filter rules formatted text file. Note that only rules containing CSS selectors (via <code>##</code> filter) are used, other lines in the rules list are ignored."},{"location":"docs/embedding/#further-examples","title":"Further Examples","text":"<p>For an example of a site built around multiple archived items, take a look at our example-webarchive repository and static website hosted on Github pages. It may give you ideas for how to integrate the ReplayWeb.page component into your site. You may also be interested in Web Replay Gen, an 11ty based static site generator for showcasing multiple WACZ files.</p>"},{"location":"docs/embedding/#common-issues","title":"Common Issues","text":"<p>Below are some possible issues that you may encounter when embedding and possible workarounds.</p>"},{"location":"docs/embedding/#embed-is-too-small-doesnt-fill-page","title":"Embed is too small / doesn't fill page.","text":"<p>If the <code>&lt;replay-web-page&gt;</code> tag is the only element on a page, and you want it to use the full window width and height, adding the following CSS should fix the issue:</p> <pre><code>html, body {\n  width: 100%;\n  height: 100%;\n}\n</code></pre>"},{"location":"docs/embedding/#loading-errors","title":"Loading Errors","text":"<p>If you see errors related to loading archived items such as <code>TypeError: failed to load</code>, the issue may be a result of a CORS error.</p> <p>See CORS Settings for more info on how to configure CORS for ReplayWeb.page</p>"},{"location":"docs/embedding/cors-settings/","title":"Configuring CORS","text":""},{"location":"docs/embedding/cors-settings/#primer","title":"Primer","text":"<p>ReplayWeb.page can can load files from any web server, but works best when the server hosting the archived content can respond to <code>Range</code> requests.  That being said, a common obstacle is configuring Cross-Origin Resource Sharing (CORS) settings to give ReplayWeb.page access to the data when content is being hosted from a different server than the webpage where it is embedded.</p> <p>Browsers typically restrict access to files hosted on a different domain than the website they are trying to load for security reasons.</p> <p>If you are loading archived items from a different domain (for example, S3 or other cloud storage), the site hosting the file needs to 'allow' the website to load the file using special CORS headers.</p> <p>These settings apply whenever archived items are hosted on a different domain than the viewer. If you are loading via the https://replayweb.page site, you need to grant access to <code>https://replayweb.page</code> to load these items.</p> <p>The minimum requirement is to return: <code>Access-Control-Allow-Origin: https://replayweb.page</code> and most CORS settings include at least this option.</p>"},{"location":"docs/embedding/cors-settings/#differences-between-chrome-firefox-and-safari","title":"Differences Between Chrome, Firefox, and Safari","text":"<p>Unfortunately, browsers have diverged in how they handle enforcing CORS policies.</p> <p>Firefox and Safari sometimes send a pre-flight OPTIONS request when handling ReplayWeb.page requests, because the ReplayWeb.page uses the <code>Range</code> header.</p> <p>Chrome currently considers it a 'safe' header, but the other browsers have not yet made this change.</p> <p>For best compatibility with all browsers, we recommend including all headers as 'allowed headers' for use with ReplayWeb.page, eg. by setting <code>Access-Control-Allow-Headers: '*'</code> as part of the CORS response in addition to <code>Access-Control-Allow-Origin</code>.</p>"},{"location":"docs/embedding/cors-settings/#cors-configurations-for-common-hosting-environments","title":"CORS Configurations for Common Hosting Environments","text":"<p>The following section provides suggested CORS configurations for different hosting environments. For more examples of CORS configurations for different servers, see: enable-cors.org.</p>"},{"location":"docs/embedding/cors-settings/#s3-and-compatible-configurations","title":"S3 and Compatible Configurations","text":"<p>When hosting with Amazon S3 or an S3-compatible service, these CORS bucket configurations should work.</p> <p>Amazon S3 and other services now support a JSON based bucket policy, as well as an older XML-based policy.</p> <p>The below examples provide access to <code>https://replayweb.page</code> to load your archive. When embedding replayweb.page, replace the URL with that of the server (origin) URL where the <code>&lt;replay-web-page&gt;</code> embed is hosted.</p> <p>Both the JSON and XML options provide a method of specifying multiple origins via the JSON list or multiple <code>&lt;AllowedOrigin&gt;</code> tags.</p>"},{"location":"docs/embedding/cors-settings/#json-based-configuration","title":"JSON-Based Configuration","text":"<pre><code>[\n  {\n    \"AllowedOrigins\": [\n      \"https://replayweb.page\"\n    ],\n    \"AllowedMethods\": [\n      \"GET\",\n      \"HEAD\"\n    ],\n    \"AllowedHeaders\": [\n      \"*\"\n    ]\n  }\n]\n</code></pre>"},{"location":"docs/embedding/cors-settings/#xml-based-configuration","title":"XML-Based Configuration","text":"<pre><code>&lt;CORSConfiguration\nxmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;\n&lt;CORSRule&gt;\n  &lt;AllowedMethod&gt;GET&lt;/AllowedMethod&gt;\n  &lt;AllowedMethod&gt;HEAD&lt;/AllowedMethod&gt;\n  &lt;AllowedOrigin&gt;https://replayweb.page&lt;/AllowedOrigin&gt;\n  &lt;AllowedHeader&gt;*&lt;/AllowedHeader&gt;\n  &lt;ExposeHeader&gt;Content-Range&lt;/ExposeHeader&gt;\n  &lt;ExposeHeader&gt;Content-Encoding&lt;/ExposeHeader&gt;\n  &lt;ExposeHeader&gt;Content-Length&lt;/ExposeHeader&gt;\n&lt;/CORSRule&gt;\n&lt;/CORSConfiguration&gt;\n</code></pre> <p>This policy can be applied using the s3cmd command-line tool:</p> <ol> <li>Paste the above snippet into a file, eg. <code>cors.xml</code></li> <li>Set the <code>&lt;AllowedOrigin&gt;</code> URL to the site hosting the embed. You can add as many of these as necessary.</li> <li>Run <code>s3cmd setcors ./cors.xml s3://&lt;your-bucket&gt;</code> to apply the settings from the XML file to the selected S3 bucket.</li> </ol> <p>See the s3cmd docs for how to configure s3cmd to work with your setup.</p> <p>See S3 Docs for more info on how to set this policy.</p> <p>Other cloud providers may have a similar settings for configuring CORS.</p>"},{"location":"docs/embedding/cors-settings/#manual-setup-nginx","title":"Manual Setup / Nginx","text":"<p>The recommended setup for nginx is to include the following CORS settings. Like the above, when embedding replayweb.page, replace the URL with that of the server (origin) URL where the <code>&lt;replay-web-page&gt;</code> embed is hosted.</p> <pre><code>location / {\n     if ($request_method = 'OPTIONS') {\n        add_header 'Access-Control-Allow-Origin' 'https://replayweb.page';\n        add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;\n        add_header 'Access-Control-Allow-Headers' '*' ;\n        return 204;\n     }\n\n     if ($request_method = 'GET') {\n        add_header 'Access-Control-Allow-Origin' 'https://replayweb.page' always;\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;\n        add_header 'Access-Control-Allow-Headers' '*' always;\n        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;\n     }\n}\n</code></pre>"},{"location":"docs/user-guide/","title":"User Guide","text":""},{"location":"docs/user-guide/#getting-started","title":"Getting Started","text":"<ol> <li>Check out Loading Archived Items to point ReplayWeb.page towards the file you wish to view.</li> <li>Once your file has been loaded, learn how to navigate the archived content!</li> </ol>"},{"location":"docs/user-guide/#supported-formats","title":"Supported Formats","text":"<p>While ReplayWeb.page aims to support a variety of formats for archived web content, for best performance we recommend using WACZ files. To archive webpages to WACZ files on a per-page basis, we recommend ArchiveWeb.page. If you need to archive entire websites, check out Browsertrix.</p> WARC?  WACZ?  What's the difference? <p>Due to the nature of the WARC format, the entire file must be read on first use to generate an index \u2014 a list of all the pages and content available in the file used by ReplayWebpage to rebuild and display the archived content.</p> <p>Inversely, WACZ files are always loaded on-demand and no indexing is required. The initial archive view should load very quickly as a result.</p> <p>For users comfortable with the command line, we recommend converting WARC files to WACZ files by using the <code>wacz</code> python library, see py-wacz on GitHub for more information.</p> <p>ReplayWeb.page supports the following file formats listed as \"Supported\". Format type is determined based on the file's extension.</p> Format Extensions Status WACZ <code>.wacz</code>  Supported WARC <code>.warc</code>, <code>.warc.gz</code>  Supported HAR <code>.har</code>  Supported WBN <code>.wbn</code>  Not Supported ARC <code>.arc</code>  Not Supported CDX <code>.cdx</code>, <code>.cdxj</code>  Supported"},{"location":"docs/user-guide/exploring/","title":"Exploring Archived Content","text":"<p>The ReplayWeb.page homepage lists an index of all your loaded archived items. Items are searchable by their title or source, and can be filtered by the date they were loaded or their title.</p>"},{"location":"docs/user-guide/exploring/#navigation","title":"Navigation","text":"<p>ReplayWeb.page's sidebar is the fastest way of finding content within an archived item. It features several tabs that allow information to be accessed:</p>"},{"location":"docs/user-guide/exploring/#page","title":"Page","text":"<p>The pages view lists all the webpages stored within the archived item.</p>"},{"location":"docs/user-guide/exploring/#searching-for-pages","title":"Searching For Pages","text":"<p>Pages can be searched for by their title, URLs, or extracted text if available.</p> <p>ReplayWeb.page will load pre-generated full-text search data when loading WACZ files, and will also attempt to generate full-text index from HTML files contained in WARC files upon loading a WARC.</p> <p>See an example of searching for pages containing \"WARC\".</p>"},{"location":"docs/user-guide/exploring/#resources","title":"Resources","text":"<p>The resources view displays all the content within a loaded archived item, listed by URL and media type. For many archived items with no page or curatorial metadata available, this is the best way to explore the archived contents.</p> <p>This view is available for all archives that only store raw data.</p> <p>See an example of searching for image resources.</p>"},{"location":"docs/user-guide/exploring/#searching-for-resources","title":"Searching For Resources","text":"<p>Page resources can only be searched by URL. Searches can be performed by exact URL, by URL prefix, or by searching for any string contained in the URL.</p> <p>The URL Prefix option is best for searching large archives that require on-demand loading. The Contains option will not find any URLs that have not yet been loaded.</p>"},{"location":"docs/user-guide/exploring/#story","title":"Story","text":"<p>The story view presents lists of curated pages and a description of their significance, as specified by the creator of the web archive. This option is only shown if there is a curated story. As curated lists are not a standardized part of the WARC format, only WARCs exported from Conifer can be configured to use this option.</p>"},{"location":"docs/user-guide/loading/","title":"Loading Archived Items","text":"<p>ReplayWeb.page can load archived items from the local filesystem, or from remote locations. If you don't have any archived items yet, try archiving a website with ArchiveWeb.page!</p>"},{"location":"docs/user-guide/loading/#loading-local-files","title":"Loading Local Files","text":"<p>From replayweb.page, press the Choose File... button, pick any local archived item file from your computer, then press Load to start viewing the file's archived content. </p> <p></p> <p>The archived item is loaded directly in the browser and is not uploaded anywhere \u2014 your data never leaves your computer!</p> <p>Once loaded, the archived item will appear in the list of Loaded Archives and will be identified by its filename with a a <code>file://</code> URL as its source. This URL is not shareable as it doesn't exist outside of your computer.</p> Loading an archived item into ReplayWeb.page and viewing a URL in the pages list <p>To unload an archived item, click on the 'X'. Unloading an item does not delete the file from its original location.</p>"},{"location":"docs/user-guide/loading/#loading-files-from-a-url","title":"Loading Files from a URL","text":"<p>To load an archived item stored in a remote location, enter the URL of the file and press Load.</p> <p>The archived item will be downloaded, either fully or on-demand (if possible) and presented when ready.</p> <p>See the Supported Locations page for details on supported external sources for serving archived items.</p>"},{"location":"docs/user-guide/loading/#loading-files-from-google-drive","title":"Loading Files from Google Drive","text":"<p>In addition to loading remote content from URLs, ReplayWeb.page also supports loading WARC and WACZ files directly from Google Drive.</p>"},{"location":"docs/user-guide/loading/#add-on-installation","title":"Add-on Installation","text":"<p>First, install the ReplayWeb.page Google Drive Addon.</p> <ul> <li>Press the Install button, Google will walk you through the steps of installation.</li> <li>Once installed, Google will confirm the install and display where to find ReplayWeb.page in your drive.</li> </ul> Installing the ReplayWeb.page Google Drive add-on"},{"location":"docs/user-guide/loading/#usage","title":"Usage","text":"<ol> <li> <p>Navigate to any WARC or WACZ files that available on your Google Drive.</p> </li> <li> <p>Under the file's More Actions  menu, select Open With and choose ReplayWeb.page from the menu.</p> </li> </ol> <p>This will redirect to ReplayWeb.page and begin loading the file. Items loaded from Google Drive will have a source URL starting with <code>googledrive://</code>.</p> <p>Once an archived item has been successfully loaded, the app will display the archive viewer and you can begin exploring your loaded archive.</p>"},{"location":"docs/user-guide/locations/","title":"Supported Location URLs","text":"<p>ReplayWeb.page uses URLs to uniquely identify web archives.</p> <p>In addition HTTP/S, the system supports loading from additional cloud providers and via peer-to-peer decentralized services. The goal is to support loading web archives from any source a web browser can connect to.</p> <p>The following is a list of currently supported URL schemes and details below:</p>"},{"location":"docs/user-guide/locations/#http-and-https","title":"HTTP and HTTPS","text":"<p>While <code>https://replayweb.page</code> can load archived items from any URL, the hosting server must allow access by enabling cross origin resource sharing (CORS). HTTP URLs may not be accessible from <code>https://replayweb.page</code> since it requires HTTPS.</p>"},{"location":"docs/user-guide/locations/#local-files","title":"Local Files","text":"<p>Local files selected via the UI file chooser, and will be given a <code>file://</code> URL. Unlike other web archive URLs, file URLs can not be shared with others.</p>"},{"location":"docs/user-guide/locations/#amazon-s3","title":"Amazon S3","text":"<p>The <code>s3://</code> URL scheme is provided as a convenience to reference S3 URLs. The URL is converted to an HTTPS URL for access. The S3 Bucket must be public and also provide access to <code>https://replayweb.page</code> via CORS. Downloading via S3 credentials is not currently supported.</p>"},{"location":"docs/user-guide/locations/#google-drive","title":"Google Drive","text":"<p>The <code>googledrive://</code> URL scheme is used when accessing a web archive shared over Google Drive. It provides a unique identifier provided via Google Drive. When accessing a Google Drive URL, users will be asked to authenticate to be able to access the file.</p>"},{"location":"docs/user-guide/locations/#ipfs","title":"IPFS","text":"<p>The <code>ipfs://</code> URL scheme is provided as a convenience and resolves to Cloudflare's IPFS Gateway to download archives from IPFS.</p>"},{"location":"docs/user-guide/offline-use/","title":"Offline Use","text":"<p>There are two ways of using ReplayWeb.page without continuous internet access.</p>"},{"location":"docs/user-guide/offline-use/#progressive-web-app","title":"Progressive Web App","text":"<p>ReplayWeb.page can be installed as PWA (Progressive Web App) through supported browsers. Instructions for installation vary based on the browser used to install the application.</p> What's a Progressive Web App? <p>Progressive Web Apps (PWAs) can be considered cross-platform applications. PWAs are built with the same software used to develop websites, but they also allow developers to access native desktop features to integrate better with desktop operating systems and allow for offline use!</p>"},{"location":"docs/user-guide/offline-use/#safari","title":"Safari","text":"<p>After navigating to https://replayweb.page, open the <code>File</code> menu and select <code>Add to Dock</code>. This will add the PWA to your dock and in Launchpad.</p> <p>To uninstall, long press on the app in Launchpad until the icons start to shake, then press the   icon.</p>"},{"location":"docs/user-guide/offline-use/#google-chrome-microsoft-edge","title":"Google Chrome &amp; Microsoft Edge","text":"<p>After navigating to https://replayweb.page, look for the installation icon to the left of the bookmark page star in the URL bar.  Pressing this icon will display a dialog with an option to install the PWA.</p> <p>To uninstall on Edge, navigate to edge://apps/details/replayweb.page/ and press <code>Uninstall</code></p> <p>To uninstall on Chrome, open the ReplayWeb.page PWA, press the   icon button in the application bar, and select <code>Uninstall ReplayWeb.page</code>.</p>"},{"location":"docs/user-guide/offline-use/#standalone-desktop-app","title":"Standalone Desktop App","text":"<p>ReplayWeb.page is also available as a standalone app!</p> <p>Navigate to the latest release of ReplayWeb.page on GitHub and download the applicable file for your platform (.dmg for macOS or .exe for Windows).</p> <p>The standalone app is useful for two reasons:</p> <ol> <li> <p>Flash is not supported by default in most browsers. The ReplayWeb.page App will continue to bundle Ruffle, a Flash emulator, to continue to make Flash content accessible within archived web content.</p> </li> <li> <p>If your primary use involves viewing stored locally web archives, the ReplayWeb.page desktop app is a better option, as it provides direct access to the file system. Once loaded, ReplayWeb.page can continue to load web archives from disk without internet access. The desktop app fully replaces Webrecorder Player</p> </li> </ol> <p>When using https://replayweb.page, you may be asked to re-open a local file because a website cannot maintain persistent access to your file system.</p>"},{"location":"docs/user-guide/sharing/","title":"Sharing Archived Items","text":"<p>ReplayWeb.page links are designed to be shareable with others, as long as they have access to the archived item.</p> <p>ReplayWeb.page encodes the archived item source and current page parameters in the URL query and hash string. Simply copy the entire location URL, and you can share with others!</p> <p>ReplayWeb.page will parse the URL, load the source archived item, then navigate to the current snapshot or search query.</p> <p>For example, given the following URL:</p> <pre><code>https://replayweb.page/?source=s3://webrecorder-builds/warcs/netpreserve-twitter.warc#view=replay&amp;url=https%3A%2F%2Ftwitter.com%2Fnetpreserve&amp;ts=20190603053135\n</code></pre> <p>ReplayWeb.page will load the web archive from <code>s3://webrecorder-builds/warcs/netpreserve-twitter.warc</code>, navigate to the correct URL <code>https://twitter.com/netpreserve</code> at snapshot <code>20190603053135</code></p> <p>The following URL will load the same web archive, and show the search results for pages that contain the word 'WARC':</p> <pre><code>https://replayweb.page/?source=s3://webrecorder-builds/warcs/netpreserve-twitter.warc#view=pages&amp;query=WARC\n</code></pre>"},{"location":"docs/user-guide/sharing/#cant-share-links-to-local-files","title":"Can't Share Links to Local Files","text":"<p>URLs that have a source URL component of <code>source=file://...</code> can not be shared as they refer to a local file on your machine. Anyone else attempting to load that URL will get an error.</p>"},{"location":"docs/user-guide/sharing/#sharing-archived-items-with-google-drive","title":"Sharing Archived Items with Google Drive","text":"<p>Unlike local files, archived items loaded from Google Drive can be shared with others, as long as they have access!</p> <p>Files loaded from Google Drive will have a source URL component of <code>source=googledrive://...</code>.</p> <p>Due to restrictions of Google Drive, users will likely be required to authorize with their Google Account when accessing archived items stored in Google Drive. Public files shared from Google Drive can sometimes be loaded without requiring authorization, but this is only supported for small files.</p> <p>To share archived items via Google Drive ensure that the person you are sharing the item with also has the ReplayWeb.page Google Drive Integration installed (see add-on installation for details).</p> <p>Once they have installed the add-on, share the archived item with them like any other file on Google Drive and have them open it with ReplayWebpage using the Google Drive loading usage guide.</p>"}]}
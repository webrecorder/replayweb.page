import { LitElement, type PropertyValues } from "lit";
import type { Index } from "flexsearch";
import type { ItemType, URLResource } from "./types";
declare class Pages extends LitElement {
    filteredPages: URLResource[];
    sortedPages: URLResource[];
    query: string;
    flex: Index | null;
    textPages: URLResource[] | null;
    newQuery: string | null;
    loading: boolean;
    updatingSearch: boolean;
    showAllPages: boolean;
    hasExtraPages: boolean;
    currList: number;
    active: boolean;
    editable: boolean;
    changeNeeded: boolean;
    selectedPages: Set<number>;
    menuActive: boolean;
    sortKey: string;
    sortDesc: boolean;
    isSidebar: boolean;
    url: string;
    ts: string;
    editing: boolean;
    toDeletePages: Set<number> | number[] | null;
    toDeletePage: URLResource | null;
    collInfo: ItemType | Record<string, never> | null;
    allSelected: boolean;
    defaultKey: string;
    private _ival;
    static get sortKeys(): {
        key: string;
        name: string;
    }[];
    _timedUpdate(): void;
    updated(changedProperties: PropertyValues<this>): Promise<void>;
    onChangeQuery(event: Event): void;
    filter(): Promise<void>;
    filterCurated(): Promise<void>;
    sendChangeEvent(data: any): void;
    addPages(pages: any): Promise<any[]>;
    updateTextSearch(): Promise<void>;
    static get styles(): import("lit").CSSResultGroup;
    static sidebarStyles(prefix?: import("lit").CSSResult): import("lit").CSSResult;
    onSelectList(event: any): void;
    onSelectListDrop(event: any): void;
    render(): import("lit-html").TemplateResult<1>;
    renderDownloadMenu(): import("lit-html").TemplateResult<1>;
    renderPageHeader(): import("lit-html").TemplateResult<1>;
    renderDeleteModal(): import("lit-html").TemplateResult<1>;
    isCurrPage(page: any): boolean;
    renderPages(): import("lit-html").TemplateResult<1>;
    onUpdateTitle(event: any): void;
    onMenu(event: any): void;
    onSort(event: any): void;
    onSortChanged(event: any): void;
    onSelectToggle(event: any): void;
    onSelectAll(event: any): void;
    onDownload(event: any, format: any): Promise<void>;
    onDeleteConfirm(event: Event): void;
    onDeletePages(): Promise<void>;
    formatResults(): string;
    getNoResultsMessage(): import("lit-html").TemplateResult<1> | "Initializing Search..." | "Searching..." | "No Pages Found";
    onScroll(event: any): void;
}
export { Pages };
//# sourceMappingURL=pages.d.ts.map
import { LitElement, type PropertyValues, type TemplateResult } from "lit";
import type { SlSelectEvent } from "@shoelace-style/shoelace";
import type { FavIconEventDetail, ItemType, URLResource } from "./types";
import "./item-info";
export type LoadInfo = {
    extraConfig?: {
        baseUrlSourcePrefix?: unknown;
        baseUrl?: unknown;
        headers?: unknown;
        recording?: unknown;
        adblockUrl?: string | null;
    };
    customColl?: string | null;
    noWebWorker?: boolean;
    noCache?: boolean;
    hideOffscreen?: boolean;
    loadEager?: boolean;
    sourceUrl?: string;
    loadUrl?: string;
    swError?: string;
    newFullImport?: unknown;
    name?: string;
    importCollId?: string;
};
export type EmbedReplayData = {
    view?: "story" | "pages" | "resources";
    url?: string;
    ts?: string;
    title?: string;
    query?: string;
};
export type EmbedReplayEvent = EmbedReplayData & {
    type: "urlchange";
    replayNotFoundError: boolean;
};
export type TabData = EmbedReplayData & {
    currList?: number;
    urlSearchType?: string;
    currMime?: string;
};
export type TabDataUpdate = {
    reload: boolean;
    data: TabData;
    replaceLoc: boolean;
    replayNotFoundError: boolean;
};
declare class Item extends LitElement {
    inited: boolean;
    sourceUrl: string | null;
    loadInfo: LoadInfo | null;
    showSidebar: boolean | null;
    itemInfo: ItemType | Record<string, never> | null;
    item: string;
    hasStory: boolean;
    isLoading: boolean;
    tabData: TabData;
    url: string;
    ts: string;
    isFullscreen: boolean | null;
    menuActive: boolean;
    embed: string | null;
    embedDropdownActive: boolean;
    editable: boolean;
    browsable: boolean;
    clearable: boolean;
    isVisible: boolean;
    favIconUrl: string;
    appName: string;
    appVersion: string;
    autoUpdateInterval: number;
    swName: string | null;
    replayNotFoundError: boolean;
    multiTs?: string[];
    private splitter;
    private _replaceLoc;
    private _locUpdateNeeded;
    private _locationHash;
    private _autoUpdater;
    private observer?;
    private readonly archiveInfoDialog;
    private readonly tabNames;
    private readonly tabLabels;
    private _lastUrlUpdate;
    constructor();
    firstUpdated(): void;
    runUpdateLoop(): Promise<void>;
    getMultiTimestamps(): Promise<void>;
    willUpdate(changedProperties: Map<string, Record<string, unknown>>): void;
    updated(changedProperties: PropertyValues<this>): void;
    configureSplitter(): void;
    doUpdateInfo(autorefresh?: boolean): Promise<void>;
    onItemLoaded(event: any): void;
    onItemUpdate(event: any): void;
    onHashChange(): void;
    onTabClick(event: any): boolean;
    onItemTabNav(event: CustomEvent<TabDataUpdate>): void;
    updateTabData(data: TabData, replaceLoc?: boolean): void;
    static get styles(): import("lit").CSSResultGroup;
    static get compStyles(): import("lit").CSSResult;
    static get replayBarStyles(): import("lit").CSSResult;
    render(): TemplateResult<1>;
    renderTabHeader(isSidebar: any): TemplateResult<1>;
    renderLocationBar(): "" | TemplateResult<1>;
    private renderTimestamp;
    renderVerifyInfo(): "" | TemplateResult<1>;
    dragStart(): void;
    dragEnd(): void;
    renderItemInfo(): TemplateResult<1>;
    protected renderExtraToolbar(): "" | TemplateResult<1>;
    renderItemTabs(isSidebar: any): TemplateResult<1>;
    skipMenu(event: any): void;
    onKeyDown(event: any): void;
    onMenu(event: any): void;
    onFullscreenToggle(event: any): void;
    onGoBack(event: any): void;
    onGoForward(event: any): void;
    onShowPages(event: any): void;
    onFullPageView(event: any): void;
    onHideSidebar(event: any): void;
    onReplayLoading(event: CustomEvent<{
        loading: boolean;
        url: string;
        ts: string;
    }>): Promise<void>;
    onFavIcons(event: CustomEvent<FavIconEventDetail>): Promise<void>;
    onPurgeCache(event: any): void;
    deleteFully(reload?: boolean): Promise<void>;
    onSubmit(event: any): boolean;
    onLostFocus(event: any): void;
    onTimestampDropdownBtnBlur(event: MouseEvent): void;
    onSelectTimestamp(event: SlSelectEvent): void;
    navigateTo(value: any): void;
    _stringToParams(value: any): Partial<URLResource>;
    _paramsToString(value: Record<string, unknown>): string;
    onRefresh(event: Event | null, replayOnly?: boolean): void;
    onAbout(): void;
    onShowInfoDialog(): void;
    onHideInfoDialog(): void;
}
export { Item };
//# sourceMappingURL=item.d.ts.map